name: Tic-Tac-Toe Game

on:
  issues:
    types: [opened]
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * *" # Reset game daily at noon

jobs:
  tic-tac-toe:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.title, 'ttt') || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    
    permissions:
      contents: write
      issues: write
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Process Tic-Tac-Toe Move
        run: |
          cat > tictactoe.py << 'EOF'
          import json
          import os
          import re
          
          def create_board_svg(board, game_status="ongoing"):
              svg_content = f'''<svg width="300" height="350" xmlns="http://www.w3.org/2000/svg">
                <defs>
                  <style>
                    .board-bg {{ fill: #0d1117; stroke: #30363d; stroke-width: 2; }}
                    .grid-line {{ stroke: #58a6ff; stroke-width: 3; }}
                    .cell {{ fill: transparent; stroke: #21262d; stroke-width: 1; cursor: pointer; }}
                    .x-mark {{ stroke: #f85149; stroke-width: 4; stroke-linecap: round; }}
                    .o-mark {{ stroke: #39d353; stroke-width: 4; stroke-linecap: round; fill: none; }}
                    .title {{ fill: #c9d1d9; font-family: Arial; font-size: 18px; text-anchor: middle; }}
                    .status {{ fill: #8b949e; font-family: Arial; font-size: 14px; text-anchor: middle; }}
                    .instruction {{ fill: #58a6ff; font-family: Arial; font-size: 12px; text-anchor: middle; }}
                  </style>
                </defs>
                
                <rect class="board-bg" width="300" height="350" rx="10"/>
                
                <!-- Title -->
                <text class="title" x="150" y="30">üéÆ GitHub Tic-Tac-Toe</text>
                
                <!-- Game board -->
                <g transform="translate(50, 50)">
                  <!-- Grid lines -->
                  <line class="grid-line" x1="67" y1="0" x2="67" y2="200"/>
                  <line class="grid-line" x1="133" y1="0" x2="133" y2="200"/>
                  <line class="grid-line" x1="0" y1="67" x2="200" y2="67"/>
                  <line class="grid-line" x1="0" y1="133" x2="200" y2="133"/>
                  
                  <!-- Cells and marks -->'''
          
              for i in range(3):
                  for j in range(3):
                      x = j * 67
                      y = i * 67
                      cell_num = i * 3 + j + 1
                      
                      svg_content += f'<rect class="cell" x="{x}" y="{y}" width="66" height="66"/>'
                      
                      if board[i][j] == 'X':
                          svg_content += f'''
                          <line class="x-mark" x1="{x+15}" y1="{y+15}" x2="{x+51}" y2="{y+51}"/>
                          <line class="x-mark" x1="{x+51}" y1="{y+15}" x2="{x+15}" y2="{y+51}"/>'''
                      elif board[i][j] == 'O':
                          svg_content += f'<circle class="o-mark" cx="{x+33}" cy="{y+33}" r="20"/>'
                      else:
                          # Show cell number for empty cells
                          svg_content += f'<text x="{x+33}" y="{y+38}" text-anchor="middle" fill="#484f58" font-size="12">{cell_num}</text>'
              
              svg_content += '</g>'
              
              # Status and instructions
              if game_status == "X_wins":
                  svg_content += '<text class="status" x="150" y="280">üéâ X Wins!</text>'
              elif game_status == "O_wins":
                  svg_content += '<text class="status" x="150" y="280">üéâ O Wins!</text>'
              elif game_status == "draw":
                  svg_content += '<text class="status" x="150" y="280">ü§ù It\'s a Draw!</text>'
              else:
                  svg_content += '<text class="status" x="150" y="280">üéØ Next: X\'s Turn</text>'
              
              svg_content += '''
                <text class="instruction" x="150" y="300">Create issue titled "ttt [position]" to play</text>
                <text class="instruction" x="150" y="315">Example: "ttt 5" to place in center</text>
                <text class="instruction" x="150" y="330">Positions: 1-9 (left to right, top to bottom)</text>
              </svg>'''
              
              return svg_content
          
          def check_winner(board):
              # Check rows, columns, diagonals
              for row in board:
                  if row[0] == row[1] == row[2] != ' ':
                      return row[0]
              
              for col in range(3):
                  if board[0][col] == board[1][col] == board[2][col] != ' ':
                      return board[0][col]
              
              if board[0][0] == board[1][1] == board[2][2] != ' ':
                  return board[0][0]
              if board[0][2] == board[1][1] == board[2][0] != ' ':
                  return board[0][2]
              
              return None
          
          def is_board_full(board):
              return all(cell != ' ' for row in board for cell in row)
          
          # Initialize or load game state
          if os.path.exists('tictactoe_state.json'):
              with open('tictactoe_state.json', 'r') as f:
                  game_state = json.load(f)
          else:
              game_state = {
                  'board': [[' ' for _ in range(3)] for _ in range(3)],
                  'current_player': 'X',
                  'game_over': False
              }
          
          # Process move if triggered by issue
          if os.getenv('GITHUB_EVENT_NAME') == 'issues':
              issue_title = os.getenv('ISSUE_TITLE', '')
              match = re.search(r'ttt\s+(\d)', issue_title.lower())
              
              if match and not game_state['game_over']:
                  position = int(match.group(1))
                  if 1 <= position <= 9:
                      row = (position - 1) // 3
                      col = (position - 1) % 3
                      
                      if game_state['board'][row][col] == ' ':
                          game_state['board'][row][col] = game_state['current_player']
                          game_state['current_player'] = 'O' if game_state['current_player'] == 'X' else 'X'
          
          # Check game status
          winner = check_winner(game_state['board'])
          if winner:
              game_status = f"{winner}_wins"
              game_state['game_over'] = True
          elif is_board_full(game_state['board']):
              game_status = "draw"
              game_state['game_over'] = True
          else:
              game_status = "ongoing"
          
          # Reset game if scheduled run or manual trigger
          if os.getenv('GITHUB_EVENT_NAME') in ['schedule', 'workflow_dispatch']:
              game_state = {
                  'board': [[' ' for _ in range(3)] for _ in range(3)],
                  'current_player': 'X',
                  'game_over': False
              }
              game_status = "ongoing"
          
          # Generate SVG
          svg_content = create_board_svg(game_state['board'], game_status)
          with open('tictactoe.svg', 'w') as f:
              f.write(svg_content)
          
          # Save game state
          with open('tictactoe_state.json', 'w') as f:
              json.dump(game_state, f)
          
          print(f"Game updated! Status: {game_status}")
          EOF
          
          python tictactoe.py
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }}
          
      - name: Update README with Tic-Tac-Toe
        run: |
          # Update README with tic-tac-toe section
          if ! grep -q "<!-- TICTACTOE-START -->" README.md 2>/dev/null; then
            echo "" >> README.md
            echo "<!-- TICTACTOE-START -->" >> README.md
            echo "## üéÆ Play Tic-Tac-Toe!" >> README.md
            echo "![Tic-Tac-Toe Game](./tictactoe.svg)" >> README.md
            echo "" >> README.md
            echo "**How to play:** Create an issue with title \`ttt [position]\` where position is 1-9" >> README.md
            echo "<!-- TICTACTOE-END -->" >> README.md
          fi
          
      - name: Commit Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add tictactoe.svg tictactoe_state.json README.md
          git diff --staged --quiet || git commit -m "üéÆ Update Tic-Tac-Toe game [skip ci]"
          git push
